// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  Id        String    @id @default(uuid())
  username  String?   @unique
  fullname  String
  email     String    @unique
  password  String
  avatar    String?
  cover     String?
  bio       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  likes     Like[]
  threads   Thread[]
  follower  Follow[]  @relation(name: "Following")
  following Follow[]  @relation(name: "Follower")
}

model Follow {
  Id          String   @id @default(uuid())
  follower    User     @relation(name: "Follower", fields: [followerId], references: [Id], onDelete: Cascade)
  followerId  String
  following   User     @relation(name: "Following", fields: [followingId], references: [Id], onDelete: Cascade)
  followingId String
  followedAt  DateTime @default(now())
  isFollow    Boolean? @default(false)
}

model Thread {
  Id          String        @id @default(uuid())
  content     String
  image       ThreadImage[]
  isEdited    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  threadId    String?
  userId      String
  isLiked     Boolean       @default(false)
  likes       Like[]
  user        User          @relation(fields: [userId], references: [Id], onDelete: Cascade)
  parentReply Thread?       @relation("replies", fields: [threadId], references: [Id], onDelete: Cascade)
  replies     Thread[]      @relation("replies")
}

model ThreadImage {
  Id       String @id @default(uuid())
  url      String
  threadId String
  thread   Thread @relation(fields: [threadId], references: [Id], onDelete: Cascade)
}

model Like {
  Id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [Id], onDelete: Cascade)
  userId   String
  thread   Thread @relation(fields: [threadId], references: [Id], onDelete: Cascade)
  threadId String
}
